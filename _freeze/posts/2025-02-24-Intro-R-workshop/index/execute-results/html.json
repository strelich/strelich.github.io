{
  "hash": "037561e7ee97edfa8d82432ba11ca687",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R\"\ndescription: \"Workshop covering the basics of data-wrangling in R\"\nauthor: \"Jack Strelich\"\ndate: 2025-02-24\ncategories: [R, Data Cleaning, Teaching]\ndraft: false\nformat: html\n---\n\n\n\n\n# Overview\n\n## Objectives for today\n- Why R?\n- Getting started with R\n    + Installing R and RStudio\n    + Interacting with R\n    + Organizing work via projects and scripts\n- Nuts and Bolts of R\n    + Objects\n    + Functions\n- Exploring Data\n    + Importing and exploring data\n    + Filtering, subsetting, and cleaning data\n\n\n\n\n## Installation\n\n- R\n    + Allows your computer to \"speak\" R\n    + Follow the link for your operating system ([Mac](https://cran.r-project.org/bin/macosx/) or [Windows](https://cran.r-project.org/bin/windows/base/))\n    + Make sure to grab the newest version (R 4.4.2 \"Pile of Leaves\" as of 2024-10-31)\n- RStudio\n    + An integrated development environment (IDE) for R\n    + Provides a helpful interface for writing and running R code\n    + Follow the [link](https://posit.co/download/rstudio-desktop/), then download RStudio Desktop (free)\n- Once you've installed both, launch RStudio!\n\n## Why R?\n- Advantages\n    + Open source, multi-platform\n    + Data wrangling, analysis, and visualization in one place\n    + Tremendously versatile output options through [Quarto](https://quarto.org/)\n        - Documents (HTML, Word, PDF)\n        - Presentations\n        - Interactive web apps (via Shiny)\n    + Great tool for reproducible/open science\n    + Incredibly extensible (via packages)\n- Challenges\n    + No GUI, just code\n    + Steep learning *curb*\n    \n# Getting Started\n\n## RStudio Interface\n\n![The RStudio interface](Graphics/interface.png)\n\n## Organizing our work {.build}\n\n- Organize your R work into discrete projects helps to...\n  - Keep your analysis (code) and output in same location\n  - Allow you to pick up where you left off\n- Let's make a project for this workshop!\n  - Create a folder for today's workshop (if you haven't already) named `SciTrek R Workshop`\n  - Click `Project: (None)` in the upper right corner of RStudio, then `Open project...`\n  - Select the folder you created for the workshop\n- `SciTrek R Workshop` should now appear in upper right corner of RStudio\n\n## Using the console {.build}\n- Click in the console; you should see a prompt (`>`) and a blinking cursor\n- Type `2+2` and hit enter\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](Graphics/hackerman.jpg){fig-align='center' width=40%}\n:::\n:::\n\n\n\n- Simple example, **but** we're entering commands and generating output!\n\n### Incomplete commands {.build}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2-5*\n```\n:::\n\n\n\n- `>` will switch to `+`\n    + Indicates that R is waiting for you to finish the command\n    + If you don't want to, press `esc` to get back the `>`\n- Also: use up/down arrows to cycle through previously entered commands\n- For today:\n    + Code that you should run will be in grey boxes\n    + Results will be `monospaced` and begin with `[1]`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n22/7\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.142857\n```\n\n\n:::\n:::\n\n\n\n\n## Creating a new R script {.build}\n- Working in console (*interactively*) is straightforward, but labor-intensive\n- Solution: make a script!\n    + Plain text document containing series of commands\n- Scripts allow you to...\n    + Save and share your work\n    + Easily re-run analyses\n    + And more!\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Graphics/new script icon.png){width=20%}\n:::\n:::\n\n\n\n- Use icon in upper-left corner\n    + `Ctrl+Shift+n` (Windows)\n    + `Cmd+Shift+n` (Mac)\n    \n### Working with scripts {.build}\n- The \"Run\" command will run the line that your cursor is on\n    + \"Run\" button in upper right corner of script\n    + `Ctrl+Enter` (Windows) \n    + `Cmd+Return` (Mac)\n    + Can click and drag to select (and run) multiple lines\n    + Run all via `Alt+Ctrl+R` (Windows) or `Opt+Cmd+R` (Mac)\n- Comments: lines beginning with `#` are not evaluated\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Comments help remind you what each chunk of code does\n# They're also are a great way to take notes!\n```\n:::\n\n\n\n- For this workshop:\n    + Do work in a script\n    + Run lines via `Ctrl+Enter` or `Cmd+Return`\n    + Take notes via comments!\n\n## Projects\n\n- Save your script\n  - RStudio will default to your project folder or _working directory_\n- Working directory = first place R looks for files\n  - For projects, defaults to the project folder -- this is good!\n- File path appears in RStudio at...\n    - Top of Files pane (lower right)\n    - Top of Console pane (lower left)\n\n<!-- - Projects save your work space, including your working directory -->\n<!--   - Quit RStudio, then navigate to your workshop folder and open the `SciTrek R Workshop.Rproj` file -->\n<!--   - Notice that  -->\n\n\n# Nuts and Bolts of R\n\n## Download data\n\n- Download `phantom.csv` and save it to your workshop folder\n  - You should see it in the Files pane (lower right) along with your script\n- We'll load data from this file into R using the `read_csv()` function\n  - `read_csv()` is part of the `tidyverse` package -- we'll need to load `tidyverse` first\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package (put at the top of your script!)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n# Read data\nworkshop_data <- read_csv(\"phantom.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 300 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Condition, Gender, Major\ndbl (4): ID, SES, Anxiety, RT\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n- This code...\n  - Ran a _function_ (`read_csv()`) \n  - With a single _argument_ (`\"phantom.csv\"`)\n  - _Assigned_ (`<-`) the function's output to an _object_ (`workshop_data`)\n\n\n## Objects: the nouns of R {.build}\n- Using R means running *functions* (analyses) on *objects* (data)\n- Create objects using the assignment operator (`<-`)[^1]:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1/20\n```\n:::\n\n\n\n[^1]:Shortcut: `alt`+`-` or `option`+`-`\n\n- \"Print\" objects (display in console) by running their name:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx # Print x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.05\n```\n\n\n:::\n\n```{.r .cell-code}\nworkshop_data # Print (preview of) our data set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 300 × 7\n      ID Condition Gender Major   SES Anxiety    RT\n   <dbl> <chr>     <chr>  <chr> <dbl>   <dbl> <dbl>\n 1     1 LowDose   M      Psyc      4      17   213\n 2     2 LowDose   M      Hist      3      14   151\n 3     3 LowDose   M      Psyc      4      16   189\n 4     4 LowDose   M      Chem      1      17   240\n 5     5 LowDose   F      Hist      1      17   195\n 6     6 LowDose   M      Hist      1      19   187\n 7     7 LowDose   M      Hist      3      19   237\n 8     8 LowDose   M      Psyc      3      17   178\n 9     9 LowDose   F      Psyc      2      19   217\n10    10 LowDose   F      Psyc      2      17   179\n# ℹ 290 more rows\n```\n\n\n:::\n:::\n\n\n\n### Object names\n- Are case-sensitive (just like everything else in R!)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Gives an error -- pay attention to capitalization!\nWorkshop_data\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'Workshop_data' not found\n```\n\n\n:::\n:::\n\n\n\n- Can contain letters, numbers, underscores, and periods\n- **Cannot**:\n    + start with a number\n    + contain spaces or special characters (e.g. `@`,`&`,`%`)\n    + be *reserved words* (e.g. `if`, `else`, `TRUE`, `FALSE`)\n- Should be short, descriptive, and consistent\n    + Good: `avg_anxiety`, `pre_test_data`, `post_test_data`\n    + Bad: `baseline.recall.of.vocabulary.terms`, `foo_bar`, `stuff`\n\n\n\n<!-- For full list of reserved words, run ?reserved -->\n\n<!-- \"There are only two hard things in Computer Science: cache invalidation and naming things.\" -->\n<!-- - Phil Karlton -->\n\n\n\n### Types of objects\n\n- R has a number of object types, including...\n  - *Vector*: one-dimensional sequence of values **of same class** (e.g, numeric or character)\n  - *Matrix*: two-dimensional array of values **of same class**\n  - *Array*: *n*-dimensional array of values **of same class**\n  - *List*: one-dimensional sequence of objects **of any class**\n  - *Data frame*: two-dimensional array of values, each column can be any class\n- Vectors and data frames are by far the most useful for our purposes!\n\n### Vectors {.build}\n- Concatenate multiple values via `c()` and assign to an object to create a *vector*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(1,4,9,16,25)\n```\n:::\n\n\n\n- Many operations in R are *vectorized* -- very useful!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1/2 # Divide vector by scalar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.5  2.0  4.5  8.0 12.5\n```\n\n\n:::\n\n```{.r .cell-code}\nv1*v1 # Multiply vector by vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]   1  16  81 256 625\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(v1) # Run function on each value in vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n- Notice that each operation outputs a vector of results.\n\n### Data frames\n\n- Data frames are: \n    + Two-dimensional arrays of values\n    + Each column is a vector\n    + Each of these vectors can be different type (numeric, character, or logical)\n- Very useful for the types of data social scientists work with!\n    + Relatively simple structure (rows = participants, columns = variables)\n    + Allows for numeric, character, and logical variables to coexist\n- We'll get a lot of practice with data frames in just a moment!\n\n### Recap: Objects\n\n- Create objects by assigning values with `<-`\n- \"Print\" (display) objects by calling them by name\n- Object names must follow R's rules, and should be short, descriptive, and consistent\n- Most useful types of objects:\n  - **Vectors**: one-dimensional sequence of values (numeric, character, or logical)\n  - **Data frames**: two-dimensional array of vectors, can be of different classes\n\n## Functions: the verbs of R {.build}\n\n- Functions allow us to perform operations on objects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(workshop_data) # Print first few rows of data frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n     ID Condition Gender Major   SES Anxiety    RT\n  <dbl> <chr>     <chr>  <chr> <dbl>   <dbl> <dbl>\n1     1 LowDose   M      Psyc      4      17   213\n2     2 LowDose   M      Hist      3      14   151\n3     3 LowDose   M      Psyc      4      16   189\n4     4 LowDose   M      Chem      1      17   240\n5     5 LowDose   F      Hist      1      17   195\n6     6 LowDose   M      Hist      1      19   187\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(workshop_data) # Get basic info for each column in data frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       ID          Condition            Gender             Major          \n Min.   :  1.00   Length:300         Length:300         Length:300        \n 1st Qu.: 75.75   Class :character   Class :character   Class :character  \n Median :150.50   Mode  :character   Mode  :character   Mode  :character  \n Mean   :150.50                                                           \n 3rd Qu.:225.25                                                           \n Max.   :300.00                                                           \n                                                                          \n      SES           Anxiety             RT       \n Min.   :1.000   Min.   :  6.00   Min.   : 13.0  \n 1st Qu.:2.000   1st Qu.: 13.00   1st Qu.:181.0  \n Median :3.000   Median : 16.00   Median :201.0  \n Mean   :2.637   Mean   : 16.18   Mean   :200.2  \n 3rd Qu.:3.000   3rd Qu.: 18.00   3rd Qu.:222.0  \n Max.   :5.000   Max.   :151.00   Max.   :279.0  \n                 NA's   :3        NA's   :3      \n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(workshop_data) # Get preview of data frame\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 300\nColumns: 7\n$ ID        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ Condition <chr> \"LowDose\", \"LowDose\", \"LowDose\", \"LowDose\", \"LowDose\", \"LowD…\n$ Gender    <chr> \"M\", \"M\", \"M\", \"M\", \"F\", \"M\", \"M\", \"M\", \"F\", \"F\", \"M\", \"M\", …\n$ Major     <chr> \"Psyc\", \"Hist\", \"Psyc\", \"Chem\", \"Hist\", \"Hist\", \"Hist\", \"Psy…\n$ SES       <dbl> 4, 3, 4, 1, 1, 1, 3, 3, 2, 2, 3, 2, 1, 1, 3, 5, 3, 2, 2, 1, …\n$ Anxiety   <dbl> 17, 14, 16, 17, 17, 19, 19, 17, 19, 17, 20, NA, 19, 16, 15, …\n$ RT        <dbl> 213, 151, 189, 240, 195, 187, 237, 178, 217, 179, 220, 182, …\n```\n\n\n:::\n:::\n\n\n\n- We call functions by typing their name, followed by a set of parentheses\n    + The stuff in the parentheses are the *arguments* of the function\n    + Functions are case-sensitive!\n\n### Help with functions {.build}\n\n- Get details of arguments from the function's documentation: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?pnorm() # Info appears in Help pane (lower right)\n```\n:::\n\n\n\n- Notice that the Usage section indicates the expected order of arguments\n    + Some arguments have *default values*; note `mean = 0`, `sd = 1`\n    + Unspecified arguments will default to these values if available, or else throw an error \n- Unnamed arguments are matched by position:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npnorm(q = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9772499\n```\n\n\n:::\n\n```{.r .cell-code}\npnorm(2) # First (only) argument is assumed to be q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9772499\n```\n\n\n:::\n:::\n\n\n\n- In general (and especially when learning), it's a good idea to name all your arguments!\n    + Press `Tab` with cursor inside parentheses to bring up list of arguments\n    + Click or use arrow keys + `Return` to insert\n    \n### Recap: Functions\n\n- Consist of name followed by parentheses\n- Arguments go in parentheses\n    + Can pull up list of possible arguments with `Tab`\n- Good idea to name all arguments!\n- Get help on a function: `?pnorm()`\n\n# Exploring Data\n\n## Using `$` to extract columns {.build}\n\n- Let's say we want to look at our anxiety variable (`Anxiety`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAnxiety\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'Anxiety' not found\n```\n\n\n:::\n:::\n\n\n\n- What's going on?\n    + R assumes all objects are in *Global Environment*\n    + *But* `Anxiety` is inside `workshop_data`!\n- Use `$` to refer to variables (columns) inside data frames\n  + Returns the variable as a vector\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkshop_data$Anxiety\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]  17  14  16  17  17  19  19  17  19  17  20  NA  19  16  15  22  20  21\n [19]  16  19  24  17  19  23  20  23  20  19  16  17  18  20  18  17  17  18\n [37]  15  16  17  20  16  14  17  16  21  23  16  20  14  15  20  21  19  20\n [55]  16  19  17  14  17  18  21  17  16  15  17  13  13  18  22  23  18  NA\n [73]  18  21  18  14  22  21  24  17  18  19  23  21  20  15  19  22  22  16\n [91]  17  19  19  19  17  16  21  22  19  15  13  17  21  16  14  17  19  15\n[109]  17  20  18  18  20  17  16  11  14  20  16  19  20  19  23  17  16  16\n[127]  17  15  19  14  17  18  13  18 151  17  19  17  20  16  16  17  16  15\n[145]  19  18  20  15  18  17  16  17  19  15  17  16  13  17  16  12  16  14\n[163]  16  17  18  19  17  11  16  16  12  18  15  20  18  19  16  18  20  20\n[181]  16  21  15  16  13  15  18  19  15  13  16  15  15  20  18  15  17  18\n[199]  18  15  15  13  12  12  14  12  12  12  14  11   9  10  12  12  18  10\n[217]  11  14  12  12  11  15   8  14  12   9  13  14   8  12  15  12   6  13\n[235]  13  16   9  12   6  11  12   9  13  11  14  11  12  14  10  11  11  12\n[253]  13  18   8  12  13  13  14  13  NA  14  13   8  11  15  11   7  17  13\n[271]  10   9  10  13  13  12  13  13  11  14  13  11  12  14  11  14  13  13\n[289]  16  13  10  11  17  13  10  10  14  13  11  12\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-caution title=\"You try it!\"}\n\n- Extract the `RT` column from `workshop_data` as a vector\n\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Check your work\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkshop_data$RT\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 213 151 189 240 195 187 237 178 217 179 220 182 231 177 212 239 191 204\n [19] 129 233 269 177 241 277 185 202 187 245 194 213 219 246 207 232 163 225\n [37] 142 179 176  NA 211 165 231 196 216 186 185 181 156 196 236 249 182 192\n [55] 159 255 169 137 193 184 230 215 176 177 204 178 164 192 210 215 210 175\n [73] 196 207 214 188 201 262 240 165 180 238 225 229 205 147 229 222 276 187\n [91] 184 194 231 197 188 236 198 279 230 157 147 197 235 157 156 223  NA 172\n[109] 214 230 207 175 212 204 206 168 176 269 213 232 256 229 233 202 195 184\n[127] 200 173 198 169 226 242 193 179  13 166 233 196 249 185 177 213 190 157\n[145] 220 221 217 216 209 204 173 216 218 168 222 173 198 198 193 112 189 183\n[163] 196 196 215 235 182 160 210 191 158 207 202 222 231 219 201 190 218 226\n[181] 206 219 180 182 155 208 194 225 184 157 192 152 194 232 188 171 146 215\n[199] 241 182 226 194 211 208 201 197 232 223 229 151 182 159 175 200 246 171\n[217] 207 200 208 224 198 215 124 247 219 157 221 228 170 186 245 218 158 211\n[235] 229 233 149 196 175 132 195 166 186 194 221 158 208 230 159 177 198 175\n[253] 202 274 138 186 207 206 223 219 257 195 192 126 170 247 202 146 236 229\n[271] 209 145 204 239 221 193 202 196 200 195 204 189 189 210 190 226 233 219\n[289] 258 214 228 156 217 228  NA 168 254 224 169 229\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Get summary statistics\n\n- Use `count()` to get number of cases by grouping variable(s)\n  + First argument = data frame (avoids need for `$`)\n  + Additional arguments = grouping variable(s)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(workshop_data, Condition) # One grouping variable\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  Condition     n\n  <chr>     <int>\n1 Control     100\n2 HighDose    100\n3 LowDose     100\n```\n\n\n:::\n\n```{.r .cell-code}\ncount(workshop_data, Condition, Major) # Multiple grouping variables\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   Condition Major     n\n   <chr>     <chr> <int>\n 1 Control   Chem     14\n 2 Control   Hist     29\n 3 Control   Psyc     54\n 4 Control   <NA>      3\n 5 HighDose  Chem     16\n 6 HighDose  Hist     26\n 7 HighDose  Psyc     57\n 8 HighDose  <NA>      1\n 9 LowDose   Chem     13\n10 LowDose   Hist     43\n11 LowDose   Psyc     42\n12 LowDose   <NA>      2\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-caution title=\"You try it!\"}\n\n- Get the number of cases by....\n  + `Gender`\n  + `Gender` and `Condition`\n  \n:::\n\n\n::: {.callout-tip collapse=\"true\" title=\"Check your work\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(workshop_data, Gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Gender     n\n  <chr>  <int>\n1 F        155\n2 M        131\n3 N          9\n4 O          1\n5 <NA>       4\n```\n\n\n:::\n\n```{.r .cell-code}\ncount(workshop_data, Gender, Condition)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   Gender Condition     n\n   <chr>  <chr>     <int>\n 1 F      Control      56\n 2 F      HighDose     57\n 3 F      LowDose      42\n 4 M      Control      37\n 5 M      HighDose     39\n 6 M      LowDose      55\n 7 N      Control       5\n 8 N      HighDose      3\n 9 N      LowDose       1\n10 O      Control       1\n11 <NA>   Control       1\n12 <NA>   HighDose      1\n13 <NA>   LowDose       2\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Visualize distributions\n\n- Create a histogram of `Anxiety` with `ggplot()`\n  + `aes()` lets us map variables onto dimensions of the plot\n  + `geom_histogram()` specifies type of plot to draw\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = workshop_data, aes(x = Anxiety)) + geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-caution title=\"You try it!\"}\n\nCreate a histogram of `RT`.\n\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Check your work\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = workshop_data, aes(x = RT)) + geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 3 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n- Notice anything odd in our histograms?\n  + Unusually high Anxiety score\n  + Unusually low RT score\n\n## Filter data frames\n\n- Use `filter()` to select *rows* that meet specific conditions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(workshop_data, Gender == \"Female\") # All female participants\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 7\n# ℹ 7 variables: ID <dbl>, Condition <chr>, Gender <chr>, Major <chr>,\n#   SES <dbl>, Anxiety <dbl>, RT <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nfilter(workshop_data, Gender == \"Female\", SES > 3) # Female AND high SES\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 7\n# ℹ 7 variables: ID <dbl>, Condition <chr>, Gender <chr>, Major <chr>,\n#   SES <dbl>, Anxiety <dbl>, RT <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nfilter(workshop_data, Gender == \"Female\" | SES > 3) # Female OR high SES\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 64 × 7\n      ID Condition Gender Major   SES Anxiety    RT\n   <dbl> <chr>     <chr>  <chr> <dbl>   <dbl> <dbl>\n 1     1 LowDose   M      Psyc      4      17   213\n 2     3 LowDose   M      Psyc      4      16   189\n 3    16 LowDose   F      Psyc      5      22   239\n 4    22 LowDose   F      Psyc      4      17   177\n 5    25 LowDose   M      Hist      4      20   185\n 6    28 LowDose   M      Psyc      5      19   245\n 7    32 LowDose   F      Hist      4      20   246\n 8    35 LowDose   M      Psyc      5      17   163\n 9    40 LowDose   M      Hist      4      20    NA\n10    51 LowDose   M      Psyc      5      20   236\n# ℹ 54 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-caution title=\"You try it!\"}\n\n- Filter our data set to include only:\n  - `Anxiety` scores under 30\n  - `RT` scores over 50\n  \n:::\n  \n::: {.callout-tip collapse=\"true\" title=\"Check your work\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(workshop_data, Anxiety < 30, RT >50)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 293 × 7\n      ID Condition Gender Major   SES Anxiety    RT\n   <dbl> <chr>     <chr>  <chr> <dbl>   <dbl> <dbl>\n 1     1 LowDose   M      Psyc      4      17   213\n 2     2 LowDose   M      Hist      3      14   151\n 3     3 LowDose   M      Psyc      4      16   189\n 4     4 LowDose   M      Chem      1      17   240\n 5     5 LowDose   F      Hist      1      17   195\n 6     6 LowDose   M      Hist      1      19   187\n 7     7 LowDose   M      Hist      3      19   237\n 8     8 LowDose   M      Psyc      3      17   178\n 9     9 LowDose   F      Psyc      2      19   217\n10    10 LowDose   F      Psyc      2      17   179\n# ℹ 283 more rows\n```\n\n\n:::\n:::\n\n\n:::  \n\n- Let's examine our data frame with `summary()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(workshop_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       ID          Condition            Gender             Major          \n Min.   :  1.00   Length:300         Length:300         Length:300        \n 1st Qu.: 75.75   Class :character   Class :character   Class :character  \n Median :150.50   Mode  :character   Mode  :character   Mode  :character  \n Mean   :150.50                                                           \n 3rd Qu.:225.25                                                           \n Max.   :300.00                                                           \n                                                                          \n      SES           Anxiety             RT       \n Min.   :1.000   Min.   :  6.00   Min.   : 13.0  \n 1st Qu.:2.000   1st Qu.: 13.00   1st Qu.:181.0  \n Median :3.000   Median : 16.00   Median :201.0  \n Mean   :2.637   Mean   : 16.18   Mean   :200.2  \n 3rd Qu.:3.000   3rd Qu.: 18.00   3rd Qu.:222.0  \n Max.   :5.000   Max.   :151.00   Max.   :279.0  \n                 NA's   :3        NA's   :3      \n```\n\n\n:::\n:::\n\n\n\n- Our changes didn't stick!\n  + We need to assign the output of our filter to an object\n  \n::: {.callout-caution title=\"You try it!\"}\n\n+ Assign the output of the filter to an object called `workshop_data_filtered`\n+ Run `summary()` on the new data frame to make sure the changes stuck\n\n:::\n\n  \n::: {.callout-tip collapse=\"true\" title=\"Check your work\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkshop_data_filtered <- filter(workshop_data, Anxiety < 30, RT >50)\nsummary(workshop_data_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       ID         Condition            Gender             Major          \n Min.   :  1.0   Length:293         Length:293         Length:293        \n 1st Qu.: 77.0   Class :character   Class :character   Class :character  \n Median :152.0   Mode  :character   Mode  :character   Mode  :character  \n Mean   :150.9                                                           \n 3rd Qu.:225.0                                                           \n Max.   :300.0                                                           \n      SES           Anxiety            RT       \n Min.   :1.000   Min.   : 6.00   Min.   :112.0  \n 1st Qu.:2.000   1st Qu.:13.00   1st Qu.:182.0  \n Median :3.000   Median :16.00   Median :201.0  \n Mean   :2.621   Mean   :15.72   Mean   :200.8  \n 3rd Qu.:3.000   3rd Qu.:18.00   3rd Qu.:222.0  \n Max.   :5.000   Max.   :24.00   Max.   :279.0  \n```\n\n\n:::\n:::\n\n\n:::  \n\n## Compute new variables\n\n- Transform/create variables with `mutate()`\n  - Let's convert `Anxiety` to z-scores\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nworkshop_data_filtered <- mutate(workshop_data_filtered, \n                                 Anxiety_Z = as.vector(scale(Anxiety)))\n\nworkshop_data_filtered\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 293 × 8\n      ID Condition Gender Major   SES Anxiety    RT Anxiety_Z\n   <dbl> <chr>     <chr>  <chr> <dbl>   <dbl> <dbl>     <dbl>\n 1     1 LowDose   M      Psyc      4      17   213    0.361 \n 2     2 LowDose   M      Hist      3      14   151   -0.483 \n 3     3 LowDose   M      Psyc      4      16   189    0.0796\n 4     4 LowDose   M      Chem      1      17   240    0.361 \n 5     5 LowDose   F      Hist      1      17   195    0.361 \n 6     6 LowDose   M      Hist      1      19   187    0.923 \n 7     7 LowDose   M      Hist      3      19   237    0.923 \n 8     8 LowDose   M      Psyc      3      17   178    0.361 \n 9     9 LowDose   F      Psyc      2      19   217    0.923 \n10    10 LowDose   F      Psyc      2      17   179    0.361 \n# ℹ 283 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-caution title=\"You try it!\"}\n\nConvert RT to z-sores in a new variable called `RT_Z`\n\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Check your work\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkshop_data_filtered <- mutate(workshop_data_filtered, \n                                 RT_Z = as.vector(scale(RT)))\n\nworkshop_data_filtered\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 293 × 9\n      ID Condition Gender Major   SES Anxiety    RT Anxiety_Z   RT_Z\n   <dbl> <chr>     <chr>  <chr> <dbl>   <dbl> <dbl>     <dbl>  <dbl>\n 1     1 LowDose   M      Psyc      4      17   213    0.361   0.406\n 2     2 LowDose   M      Hist      3      14   151   -0.483  -1.66 \n 3     3 LowDose   M      Psyc      4      16   189    0.0796 -0.393\n 4     4 LowDose   M      Chem      1      17   240    0.361   1.31 \n 5     5 LowDose   F      Hist      1      17   195    0.361  -0.193\n 6     6 LowDose   M      Hist      1      19   187    0.923  -0.460\n 7     7 LowDose   M      Hist      3      19   237    0.923   1.21 \n 8     8 LowDose   M      Psyc      3      17   178    0.361  -0.759\n 9     9 LowDose   F      Psyc      2      19   217    0.923   0.539\n10    10 LowDose   F      Psyc      2      17   179    0.361  -0.726\n# ℹ 283 more rows\n```\n\n\n:::\n:::\n\n\n:::  \n\n\n## Select columns\n\n- Use `select()` to select *columns*:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Individual columns, separated by commas\nselect(workshop_data_filtered, Condition, Major, Anxiety_Z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 293 × 3\n   Condition Major Anxiety_Z\n   <chr>     <chr>     <dbl>\n 1 LowDose   Psyc     0.361 \n 2 LowDose   Hist    -0.483 \n 3 LowDose   Psyc     0.0796\n 4 LowDose   Chem     0.361 \n 5 LowDose   Hist     0.361 \n 6 LowDose   Hist     0.923 \n 7 LowDose   Hist     0.923 \n 8 LowDose   Psyc     0.361 \n 9 LowDose   Psyc     0.923 \n10 LowDose   Psyc     0.361 \n# ℹ 283 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Range of columns, separated by colon\n# v1:v5 = \"from v1 to v5\"\nselect(workshop_data_filtered, ID:Gender, RT:RT_Z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 293 × 6\n      ID Condition Gender    RT Anxiety_Z   RT_Z\n   <dbl> <chr>     <chr>  <dbl>     <dbl>  <dbl>\n 1     1 LowDose   M        213    0.361   0.406\n 2     2 LowDose   M        151   -0.483  -1.66 \n 3     3 LowDose   M        189    0.0796 -0.393\n 4     4 LowDose   M        240    0.361   1.31 \n 5     5 LowDose   F        195    0.361  -0.193\n 6     6 LowDose   M        187    0.923  -0.460\n 7     7 LowDose   M        237    0.923   1.21 \n 8     8 LowDose   M        178    0.361  -0.759\n 9     9 LowDose   F        217    0.923   0.539\n10    10 LowDose   F        179    0.361  -0.726\n# ℹ 283 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-caution title=\"You try it!\"}\n\n- Select everything **except** `Anxiety` and `RT`\n- Remember to assign output to make changes stick!\n\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Check your work\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkshop_data_filtered <- select(workshop_data_filtered, ID:SES, Anxiety_Z:RT_Z)\nworkshop_data_filtered\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 293 × 7\n      ID Condition Gender Major   SES Anxiety_Z   RT_Z\n   <dbl> <chr>     <chr>  <chr> <dbl>     <dbl>  <dbl>\n 1     1 LowDose   M      Psyc      4    0.361   0.406\n 2     2 LowDose   M      Hist      3   -0.483  -1.66 \n 3     3 LowDose   M      Psyc      4    0.0796 -0.393\n 4     4 LowDose   M      Chem      1    0.361   1.31 \n 5     5 LowDose   F      Hist      1    0.361  -0.193\n 6     6 LowDose   M      Hist      1    0.923  -0.460\n 7     7 LowDose   M      Hist      3    0.923   1.21 \n 8     8 LowDose   M      Psyc      3    0.361  -0.759\n 9     9 LowDose   F      Psyc      2    0.923   0.539\n10    10 LowDose   F      Psyc      2    0.361  -0.726\n# ℹ 283 more rows\n```\n\n\n:::\n:::\n\n\n:::  \n\n::: {.callout-note collapse=\"true\" title=\"`select()` versus subsetting via `[]`\"}\n\n- In general, we can use square brackets to select specific elements of data structures:\n  - `v[n]` selects *n*th element of vector *v*\n  - `m[i,j]` selects element at row *i*, column *j* of matrix or data frame *m*\n  - `m[i, ]` selects all elements in row *i*\n  - `m[ ,j]` selects all elements in column *j*\n- `select()` is generally better option for selecting columns because it allows indexing by name:\n  - Easier to read\n  - Doesn't rely on column order\n  - Errors are more flagrant\n\n:::  \n\n\n## Factors\n\n- Factors = useful way of storing categorical data\n  + Stored as integers with assigned *labels* from pre-defined set of *levels*\n- Let's transform our categorical variables into factors:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# We can create/transform multiple variables within same `mutate()` function!\nworkshop_data_filtered <- mutate(workshop_data_filtered,\n                                 Condition = factor(Condition),\n                                 Gender = factor(Gender),\n                                 Major = factor(Major))\n\n# Check work\nsummary(workshop_data_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       ID           Condition   Gender     Major          SES       \n Min.   :  1.0   Control :98   F   :153   Chem: 43   Min.   :1.000  \n 1st Qu.: 77.0   HighDose:98   M   :126   Hist: 94   1st Qu.:2.000  \n Median :152.0   LowDose :97   N   :  9   Psyc:150   Median :3.000  \n Mean   :150.9                 O   :  1   NA's:  6   Mean   :2.621  \n 3rd Qu.:225.0                 NA's:  4              3rd Qu.:3.000  \n Max.   :300.0                                       Max.   :5.000  \n   Anxiety_Z             RT_Z          \n Min.   :-2.73134   Min.   :-2.957579  \n 1st Qu.:-0.76366   1st Qu.:-0.626208  \n Median : 0.07963   Median : 0.006593  \n Mean   : 0.00000   Mean   : 0.000000  \n 3rd Qu.: 0.64182   3rd Qu.: 0.706004  \n Max.   : 2.32840   Max.   : 2.604407  \n```\n\n\n:::\n:::\n\n\n\n- Check levels of a factor with `levels()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use $ to extract the column from the data set\nlevels(workshop_data_filtered$Gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"F\" \"M\" \"N\" \"O\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlevels(workshop_data_filtered$Condition)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Control\"  \"HighDose\" \"LowDose\" \n```\n\n\n:::\n:::\n\n\n\n- Notice that factors default to alphabetic ordering of levels.\n  + Fine for `Gender`\n  + Confusing for `Condition`\n\n### Reorder factor levels {.build}\n\n- Use `fct_relevel()` to change order:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkshop_data_filtered <- mutate(workshop_data_filtered,\n       Condition = fct_relevel(Condition, \"Control\", \"LowDose\", \"HighDose\"))\n\nlevels(workshop_data_filtered$Condition)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Control\"  \"LowDose\"  \"HighDose\"\n```\n\n\n:::\n:::\n\n\n\n\n### Change factor labels {.build} \n\n- Use `fct_recode()` to replace factor labels (\"new\" = \"old\")\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(workshop_data_filtered$Gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"F\" \"M\" \"N\" \"O\"\n```\n\n\n:::\n\n```{.r .cell-code}\nworkshop_data_filtered <- mutate(workshop_data_filtered,\n       Gender = fct_recode(Gender, \n                           \"Female\" = \"F\",\n                           \"Male\" = \"M\",\n                           \"Non-binary\" = \"N\",\n                           \"Other\" = \"O\"))\n\nlevels(workshop_data_filtered$Gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Female\"     \"Male\"       \"Non-binary\" \"Other\"     \n```\n\n\n:::\n:::\n\n\n\n- Always do a sanity check after recoding factors!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Per earlier summary statistics, should be mainly Male or Female\ncount(workshop_data_filtered, Gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Gender         n\n  <fct>      <int>\n1 Female       153\n2 Male         126\n3 Non-binary     9\n4 Other          1\n5 <NA>           4\n```\n\n\n:::\n:::\n\n\n\n\n\n## The pipe operator\n\n- Often need to perform a series of operations on the same object\n  + Solution: the pipe operator (`|>`)[^2]\n  + Insert with `Cmd+shift+M`\n- \"Pipes\" object on left into function on right\n    + Taken as first argument by default\n    + Can use `_` as placeholder\n- Advantages\n    + Avoids nesting; read left-right instead of inside-out\n      - `h(g(f(x)))` vs. `x |> f() |> g() |> h()`\n    + Cleanly perform multiple operations without intermediate objects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start with our \"raw\" data\nworkshop_data |>\n  filter(Anxiety < 30, RT >50) |> \n  mutate(Anxiety_Z = as.vector(scale(Anxiety)),\n         RT_Z = as.vector(scale(RT)),\n         Condition = fct_relevel(Condition, \"Control\", \"LowDose\", \"HighDose\"),\n         Gender = fct_recode(Gender, \n                           \"Female\" = \"F\",\n                           \"Male\" = \"M\",\n                           \"Non-binary\" = \"N\",\n                           \"Other\" = \"O\"),\n         Major = factor(Major)) |> \n  select(ID:SES, Anxiety_Z:RT_Z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 293 × 7\n      ID Condition Gender Major   SES Anxiety_Z   RT_Z\n   <dbl> <fct>     <fct>  <fct> <dbl>     <dbl>  <dbl>\n 1     1 LowDose   Male   Psyc      4    0.361   0.406\n 2     2 LowDose   Male   Hist      3   -0.483  -1.66 \n 3     3 LowDose   Male   Psyc      4    0.0796 -0.393\n 4     4 LowDose   Male   Chem      1    0.361   1.31 \n 5     5 LowDose   Female Hist      1    0.361  -0.193\n 6     6 LowDose   Male   Hist      1    0.923  -0.460\n 7     7 LowDose   Male   Hist      3    0.923   1.21 \n 8     8 LowDose   Male   Psyc      3    0.361  -0.759\n 9     9 LowDose   Female Psyc      2    0.923   0.539\n10    10 LowDose   Female Psyc      2    0.361  -0.726\n# ℹ 283 more rows\n```\n\n\n:::\n:::\n\n\n\n[^2]: `|>` is the base R (\"native\") pipe; `%>%` is the older `magrittr` pipe\n\n- Recreates `workshop_data_filtered`!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkshop_data_filtered\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 293 × 7\n      ID Condition Gender Major   SES Anxiety_Z   RT_Z\n   <dbl> <fct>     <fct>  <fct> <dbl>     <dbl>  <dbl>\n 1     1 LowDose   Male   Psyc      4    0.361   0.406\n 2     2 LowDose   Male   Hist      3   -0.483  -1.66 \n 3     3 LowDose   Male   Psyc      4    0.0796 -0.393\n 4     4 LowDose   Male   Chem      1    0.361   1.31 \n 5     5 LowDose   Female Hist      1    0.361  -0.193\n 6     6 LowDose   Male   Hist      1    0.923  -0.460\n 7     7 LowDose   Male   Hist      3    0.923   1.21 \n 8     8 LowDose   Male   Psyc      3    0.361  -0.759\n 9     9 LowDose   Female Psyc      2    0.923   0.539\n10    10 LowDose   Female Psyc      2    0.361  -0.726\n# ℹ 283 more rows\n```\n\n\n:::\n:::\n\n\n\n## Recap: Exploring data\n\n- Useful functions:\n  - `count()` to get number of cases by grouping variable(s)\n  - `ggplot() + geom_histogram()` to visualize distributions\n  - `filter()` to keep rows based on logical statements\n  - `mutate()` to create/transform variables\n- Must assign output to make changes stick\n- Use pipe operator (`|>`) to perform series of operations on the same object\n\n# Wrapping Up\n\n## Recap\n\nToday, we learned how to:\n\n- Use RStudio to create and edit R scripts\n- Create objects and assign values\n- Run functions on objects\n- Read data into R\n- Explore data and reconfigure variables\n- Clean, filter, and subset data\n\n## The Big Picture\n\n- Workflow in...\n    + SPSS/Excel: your spreadsheet/.sav file is \"the thing\"\n    + R + RStudio: your script is \"the thing\"\n- Your RStudio workspace is fleeting and ephemeral; your script endures\n  + Save your scripts early and often!\n  + Do all data cleaning/wrangling/analysis in the script\n  + Everything needed for analysis should be in the script\n    - Load packages via `library()`\n    - Load data via `read_csv()`\n- Use a *project-oriented workflow*\n    + Create a folder (working directory) for each project\n    + Save scripts, data, and output here\n    + Set up as project in RStudio\n- Start each session with blank slate!\n  + `Tools > Global Options... > General` then uncheck all options for Workspace and History\n  \n![Settings under Global Options](Graphics/clean_slate.png)\n  \n::: {.callout-caution title=\"You try it!\"}\n\n- Save your script\n- Quit RStudio\n- Navigate to your workshop folder and open `SciTrek R Workshop.Rproj`\n- Environment pane should be empty\n- Re-run your script\n\n  \n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Check your work\"}\n\n- You should now see `workshop_data_filtered` in your Environment pane\n  + We're right back where we left off!\n:::\n\n## When things go pear-shaped...\n\n- Check for typos!\n  + cApItAlIzAtIoN\n  + Make sure that quotes, parentheses, and brackets are paired correctly\n    - Place cursor on a parenthesis, R will highlight its mate!\n- Make sure necessary packages are loaded!\n  + `could not find function` usually means typo OR package isn't loaded\n- Work with a buddy!\n  + Rubber duck debugging!\n- `Session` > `Restart R`!\n\n![It works about half the time!](Graphics/ITCrow.jpg)\n\n## Useful resources\n\n- [*R for Data Science*](https://r4ds.hadley.nz/): By the authors of the `tidyverse`!\n- [*Cookbook for R*](http://www.cookbook-r.com/): Straightforward, focused on problem-solving\n- [Cheatsheets](https://posit.co/resources/cheatsheets/): Resources for base R, RStudio, and some popular packages\n\n<!-- - Your script is your work -- objects/history are ephemeral -->\n\n# Bonus Content!\n\n## Restructuring Data\n\nNext, we'll introduce a new data set and get some practice with _data restructuring_.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwide_data <- read_csv(\"wide_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 270 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (7): ID, Introv_T1, Introv_T2, Introv_T3, Risktol_T1, Risktol_T2, Riskto...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(wide_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 270\nColumns: 7\n$ ID         <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 21, …\n$ Introv_T1  <dbl> 3, 9, 2, 5, 1, 2, 3, 3, 3, 7, 4, 3, 5, 3, 4, 3, 9, NA, 6, 4…\n$ Introv_T2  <dbl> 2, 5, 3, 4, 5, 8, 5, 4, 7, 7, 10, 6, 8, 8, 4, 5, 2, 6, 8, 5…\n$ Introv_T3  <dbl> 9, 7, 8, 11, 6, 10, 8, 6, 8, 11, 8, 7, 8, 6, 9, 10, 8, 5, 9…\n$ Risktol_T1 <dbl> 5, 6, 21, 18, 12, 18, 14, 10, 14, 19, 13, 16, 13, 12, 8, 7,…\n$ Risktol_T2 <dbl> 10, 15, 14, 16, 3, 26, 9, 13, 19, 17, 14, 23, 14, 1, 11, 14…\n$ Risktol_T3 <dbl> 3, 12, 14, 21, 23, 14, 1, 12, 20, 28, 26, 24, 3, 35, 16, 23…\n```\n\n\n:::\n:::\n\n\n\n\nData from (imaginary) participants from our previous (imaginary) study\n\n- `ID`: participant ID\n- `Introv_`: introversion scores at three time points (`T1` through `T3`)\n- `Risktol_`: risk tolerance scores at three time points (`T1` through `T3`)\n    \n### Ways of structuring data\n\n- _Wide data_\n    + Each observation of each variable is a column\n    + Each participant is a row\n    + Default for SPSS (and Qualtrics)!\n    \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n     ID Introv_T1 Introv_T2 Introv_T3 Risktol_T1 Risktol_T2 Risktol_T3\n  <dbl>     <dbl>     <dbl>     <dbl>      <dbl>      <dbl>      <dbl>\n1     1         3         2         9          5         10          3\n2     2         9         5         7          6         15         12\n3     3         2         3         8         21         14         14\n4     4         5         4        11         18         16         21\n5     5         1         5         6         12          3         23\n6     6         2         8        10         18         26         14\n```\n\n\n:::\n:::\n\n\n    \n- _Long data_\n    + Each variable is a column\n    + Each observation is a row\n  \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  Tree  age circumference\n1    1  118            30\n2    1  484            58\n3    1  664            87\n4    1 1004           115\n5    1 1231           120\n6    1 1372           142\n```\n\n\n:::\n:::\n\n\n\nWide and long format have advantages/disadvantages. What format should you aim for?\n\n  - *Tidy* data format is standardized, easy to read, easy to restructure\n    + Each **variable** is a column\n    + Each **observation** is a row\n    + Each **type** of observational unit is a table\n  - More info on tidy data: https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html\n\nWith these principles in mind, let's look at our new data set:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(wide_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n     ID Introv_T1 Introv_T2 Introv_T3 Risktol_T1 Risktol_T2 Risktol_T3\n  <dbl>     <dbl>     <dbl>     <dbl>      <dbl>      <dbl>      <dbl>\n1     1         3         2         9          5         10          3\n2     2         9         5         7          6         15         12\n3     3         2         3         8         21         14         14\n4     4         5         4        11         18         16         21\n5     5         1         5         6         12          3         23\n6     6         2         8        10         18         26         14\n```\n\n\n:::\n:::\n\n\n\n- What are our variables?\n- What are our columns?\n- Let's tidy it up!\n\n### Tidying data\n\nStart by converting to long data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_dat <- pivot_longer(wide_data, # Which data set\n                         cols = Introv_T1:Risktol_T3, # Which columns to restructure\n                         names_to = \"Measure\", # New column of names\n                         values_to = \"Score\") # New column of values\ntidy_dat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,620 × 3\n      ID Measure    Score\n   <dbl> <chr>      <dbl>\n 1     1 Introv_T1      3\n 2     1 Introv_T2      2\n 3     1 Introv_T3      9\n 4     1 Risktol_T1     5\n 5     1 Risktol_T2    10\n 6     1 Risktol_T3     3\n 7     2 Introv_T1      9\n 8     2 Introv_T2      5\n 9     2 Introv_T3      7\n10     2 Risktol_T1     6\n# ℹ 1,610 more rows\n```\n\n\n:::\n:::\n\n\n\n\nThe `Measure` column combines the other two variables with time. Let's make sure that each variable gets its own column; we'll need to split the names in `Measure` into two parts.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_dat <-  separate(tidy_dat, \n                      Measure, # Which col to split\n                      sep = \"_\", # Which character to split at\n                      into = c(\"Measure\",\"Time\"), # Names for new cols\n                      remove = TRUE) # Get rid of the original col after\n\ntidy_dat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,620 × 4\n      ID Measure Time  Score\n   <dbl> <chr>   <chr> <dbl>\n 1     1 Introv  T1        3\n 2     1 Introv  T2        2\n 3     1 Introv  T3        9\n 4     1 Risktol T1        5\n 5     1 Risktol T2       10\n 6     1 Risktol T3        3\n 7     2 Introv  T1        9\n 8     2 Introv  T2        5\n 9     2 Introv  T3        7\n10     2 Risktol T1        6\n# ℹ 1,610 more rows\n```\n\n\n:::\n:::\n\n\n\n`separate()` separates columns at a given separator (e.g., `_`) OR position (e.g., seventh character). By default, it will treat any non-alphanumeric character as a separator (so we technically didn't need to specify `sep` here).\n\n\nThe last step: `Introv` and `Risktol` share the same columns (`Measure` and `Score`). Solution: pivot wider with `pivot_wider()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_dat <- pivot_wider(tidy_dat,\n                        names_from = Measure, # Where to get column names from\n                        values_from = Score) # Where to get actual values from\ntidy_dat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 810 × 4\n      ID Time  Introv Risktol\n   <dbl> <chr>  <dbl>   <dbl>\n 1     1 T1         3       5\n 2     1 T2         2      10\n 3     1 T3         9       3\n 4     2 T1         9       6\n 5     2 T2         5      15\n 6     2 T3         7      12\n 7     3 T1         2      21\n 8     3 T2         3      14\n 9     3 T3         8      14\n10     4 T1         5      18\n# ℹ 800 more rows\n```\n\n\n:::\n:::\n\n\n\n\nFinally, our data is tidy:\n\n  + Each variable (`id`, `Gender`, `Time`, `Introv`, `Risktol`) is its own column\n  + Each observation is a row\n  + Table represents a single type of observational unit (people)\n\n### A more streamlined approach\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npivot_longer(wide_data,\n             Introv_T1:Risktol_T3, # Specify columns to pivot\n             names_sep = \"_\", # Parts of name are separated by underscore\n             names_to = c(\".value\", \"Time\")) # 1st bit names new cols, 2nd bit gets named \"Time\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 810 × 4\n      ID Time  Introv Risktol\n   <dbl> <chr>  <dbl>   <dbl>\n 1     1 T1         3       5\n 2     1 T2         2      10\n 3     1 T3         9       3\n 4     2 T1         9       6\n 5     2 T2         5      15\n 6     2 T3         7      12\n 7     3 T1         2      21\n 8     3 T2         3      14\n 9     3 T3         8      14\n10     4 T1         5      18\n# ℹ 800 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### Tidy data resources\n\n- [Dr. Wickham's original paper](http://vita.had.co.nz/papers/tidy-data.pdf)\n- [Hands-on version](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)\n- [Another how-to](https://garrettgman.github.io/tidying/)\n\n\n## Best Practices for Data Collection and Wrangling\n\nDon't:\n\n- Overwrite raw data\n  - Do all data cleaning/wrangling in a script instead\n- Merge cells\n  - Makes data difficult/impossible for R to read\n- Include multiple tables in one sheet\n  - Makes data difficult/impossible for R to read\n- Use formatting (highlighting, bold, italics) to record data\n  - Easily lost when loading data\n- Split data with common format across tabs/files\n  - Easy to make mistakes, minor discrepancies can cause major headaches\n\nDo:\n  \n- Represent *variables* as columns and *observations* as rows\n  - Tidy data!\n- Store only one piece of information per cell\n  - Bad: `Height` = `6ft4in`\n  - Good: `Height_inches` = `76`\n\nExcellent [Data Carpentry workshop](https://datacarpentry.github.io/spreadsheets-socialsci/) on this topic! \n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}